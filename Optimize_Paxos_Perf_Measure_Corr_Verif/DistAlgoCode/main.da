import sys
import time
import plotter
from random import randint

PREMPTION = False 

TIMEOUTVALUE_LEARNER = 2
TIMEOUTVALUE_PROPOSER = 2

TIMEOUT = False

MSG_DELAY = 0.0
MSG_LOSS_RATE = 0.0

WAIT_TIME = 0
NUMBER_OF_REPITITIONS = 2

def anyof(s):
    """return any element of set s if s is not empty or 'None' otherwise"""
    return next(iter(s)) if s else None


class Proposer(process):
    def setup(acceptors,monitor):
        self.n = None              # proposal number
        self.majority = acceptors  # majority of acceptors; all in other papers
        self.prempt = False
        self.msgsAttempted = 0
        self.lostMsgs = 0

    def mysend(msg,receiver):
        self.msgsAttempted += 1
        msgsToDrop = int(MSG_LOSS_RATE * self.msgsAttempted)
        if (self.lostMsgs < msgsToDrop):
           self.lostMsgs += 1
           output('Dropping the message')
           return;
        time.sleep(MSG_DELAY)
        send(msg,to=receiver)

    def to_consent():
        self.prempt = False

        n = (0, self.id) if n == None else (n[0]+1, self.id)  # pick a prop num
        mysend(('prepare',n),majority)
        #send(('prepare', n), to= majority)
         
        send(('waiting',self.id),to=monitor)

        if (await((len(setof(a, received(('respond', _n, _), from_= a)))
                 > len(acceptors)/2 ) and (not self.prempt or PREMPTION))):
            v = anyof(setof(v, received(('respond', _n, (n2, v))),
                            n2==max(setof(n2, received(('respond', _n, (n2, _))))))
                      or {randint(1,100)}) 
            responded = setof(a, received(('respond', _n, _), from_= a))
            mysend(('accept', n, v), responded)
            #send(('accept', n, v), to= responded)
            send(('leader',self.id),to=monitor)
            send(('chosen',n,v),to=monitor)
            output('### chose', n, v)
        #elif self.prempt:
             #output('!!!Prempted!!! Failed proposal number',n)
        elif timeout(TIMEOUTVALUE_PROPOSER):
            output('!!!TimedOut!!! Failed proposal number', n)

    def receive(msg= ('StopProposing',_,_),from_ = p):
        #output('Prempt msg received')
        self.prempt = True
 
    def receive(msg= ('done',)):          ##
        output('terminating'); exit()     ##

    def run():
        while True: 
            to_consent()
            time.sleep(WAIT_TIME)

class Acceptor(process):
    def setup(learners): 
        self.msgsSent = 0
        self.msgsAttempted = 0
        self.lostMsgs = 0


    def mysend(msg,receiver):
        self.msgsAttempted += 1
        msgsToDrop = int(MSG_LOSS_RATE * self.msgsAttempted)
        if (self.lostMsgs < msgsToDrop):
           self.lostMsgs += 1
           output('Dropping the message')
           return;
        time.sleep(MSG_DELAY)
        send(msg,to=receiver)

    def receive(msg= ('prepare', n), from_= p):
        
        if PREMPTION and some(sent(('respond',n2,_)),has= n2 > n):
            mysend(('StopProposing',n,n2),p)
            #send(('StopProposing',n,n2),to= p)
            output('Prempting :' + str(p))
            return 

        if each(sent(('respond', n2, _)), has= n > n2):
            max_prop = anyof(setof((n, v), sent(('accepted', n, v)),
                                   n==max(setof(n, sent(('accepted', n, _))))))
            mysend(('respond', n, max_prop), p)
            #send(('respond', n, max_prop), to= p)

    def receive(msg= ('accept', n, v)):
        if not some(sent(('respond', n2, _)), has= n2 > n):
            mysend(('accepted', n, v), learners)
            #send(('accepted', n, v), to= learners)

    def receive(msg= ('done',)):          ##
        output('terminating'); exit()     ##

    def run():
        await(False)

class Learner(process):
    def setup(acceptors,monitor): pass


    def learn():
        if await(some(received(('accepted', n, v)),
                      has= len(setof(a, received(('accepted', _n, _v), from_=a)))
                           > len(acceptors)/2)):
            output('learned', n, v)
            send(('learnt',n,v),to= monitor)
            await(received(('ack',n,v)))
        elif timeout(TIMEOUTVALUE_LEARNER * 10):
            output('Failed to learn anything')

    def run():
        learn()
        output('terminating')

class Monitor(process):
	def setup(learners,proposers): 
		self.leaders = 0
		self.waitlist = set()
		self.live = True
		self.live2 = True
		self.safe = True
		self.fair = True
		self.chosen = set()
		self.learnt = {}

	def sendCorrectnessReport(msgs):
		plotter.correctnessReport((self.safe,self.live,self.live2,self.fair),str(msgs))


	def add(n,v,p):
		x = self.learnt.pop((n,v))
		if x is None:
			self.learnt[(n,v)] = [p]
		else:
			x.append(p)
			self.learnt[(n,v)] = x


	def receive(msg= ('learnt', n,v),from_ = p):
	
		output('From monitor' + str((n,v)))
		self.leaders += 1
		if (self.leaders != 1 and not ((n,v) in self.chosen)):
			self.safe = False
			sendCorrectnessReport('Safety violated. Two leaders are learnt')
			exit()
		send(('ack',n,v),to= p)
		self.leaders -= 1

	def receive(msg=('chosen',n,v)):
		self.chosen.add((n,v))

	def checkLiveness():
		values = self.learnt.items()
		for value in values:
			if len(value) != len(learners):
				self.live2 = False
	

	def receive(msg= ('done',)):                       
		output('!!!The System is SAFE!!!')
		checkLiveness()
		if (len(self.waitlist) is not 0):
			self.fair = False
			msgs = "\nOn-termination report"
			for x in self.waitlist:
				msgs = msgs + str(x)+ ' wanted to be the Leader but did not become one' + '\n'
			sendCorrectnessReport(msgs)
		else:
			output('Strong Fairness test succeeded')
			sendCorrectnessReport("Succeeded")
		output('Closing Monitor'); 
		exit() 
   
	def receive(msg= ('waiting',p)):
		self.waitlist.add(p)
		if (self.leaders is 0):
			self.live = False	
			sendCorrectnessReport('!!!First liveness condition violated!!! Process ' + str(p) +' waiting when there is no Leader')	

	def receive(msg= ('leader',p)):
		self.waitlist.remove(p)

	def run():
		await(False)


def main():

    global PREMPTION 
    global NUMBER_OF_REPITITIONS
    global TIMEOUTVALUE_LEARNER
    global TIMEOUTVALUE_PROPOSER
    global MSG_DELAY
    global TIMEOUT

    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 3
    nproposers = int(sys.argv[2]) if len(sys.argv) > 2 else 3
    nlearners = int(sys.argv[3]) if len(sys.argv) > 3 else 3
    NUMBER_OF_REPITITIONS = int(sys.argv[4]) if len(sys.argv) > 4 else 3
    MSG_LOSS_RATE = float(sys.argv[5]) if len(sys.argv) > 5 else 0
    MSG_DELAY = int(sys.argv[6]) if len(sys.argv) > 6 else 0
    WAIT_TIME = int(sys.argv[7]) if len(sys.argv) > 7 else 0
    
    TIMEOUTVALUE_LEARNER = int(sys.argv[8]) if len(sys.argv) > 8 else 1
    TIMEOUTVALUE_PROPOSER = int(sys.argv[9]) if len(sys.argv) > 9 else 1

    premptString = str(sys.argv[10]) if len(sys.argv) > 10 else 'False'
    timeOutString = str(sys.argv[11]) if len(sys.argv) > 11 else 'False'

    if premptString == 'False':
        PREMPTION = False
    else:
        PREMPTION = True
    
    if timeOutString == 'False':
        TIMEOUT = False
    else:
        TIMEOUT = True
    
    
    FILENAME = str(sys.argv[12]) if len(sys.argv) > 12 else '<PROVIDEFILENAME>'
 
    assert MSG_LOSS_RATE >= 0 and MSG_LOSS_RATE <= 1
    assert (not TIMEOUT) or (((MSG_DELAY < TIMEOUTVALUE_LEARNER) and (MSG_DELAY<TIMEOUTVALUE_PROPOSER)) or 
           (MSG_DELAY is 0) and (TIMEOUTVALUE_LEARNER is not 0 and TIMEOUTVALUE_LEARNER is not 0))

    plotter.createDirectory('output')
    plotter.setFileName(FILENAME)
    if TIMEOUT is False:
       TIMEOUTVALUE_LEARNER = 1000  
       TIMEOUTVALUE_PROPOSER = 1000 

    CPUTimes = []
    ElapsedTimes = []
    runCount = 1
    iterations = []
    while NUMBER_OF_REPITITIONS > 0:

        print('ITERATION BEGINS')
        
        CPUTimeStart = time.process_time()
        ElapsedTimeStart = time.perf_counter()

        monitor = new(Monitor,num= 1)
        acceptors = new(Acceptor, num= nacceptors)
        proposers = new(Proposer, (acceptors,monitor,), num= nproposers)
        learners = new(Learner, (acceptors,monitor,), num= nlearners)

        for p in acceptors: setup(p, (learners,))
        setup(monitor,(learners,proposers,))

        start(acceptors | proposers | learners | monitor)

        for p in learners: p.join()           ##
        print('done')                         ##
        da.send(('done',), to= (acceptors | proposers | monitor))  ## da.send not in da-lang
        NUMBER_OF_REPITITIONS -= 1
        print('ITERATION ENDS')
        CPUTime = time.process_time() - CPUTimeStart
        ElapsedTime = time.perf_counter() - ElapsedTimeStart
        iterations.append(runCount)
        runCount += 1
        CPUTimes.append(CPUTime)
        ElapsedTimes.append(ElapsedTime)

    plotter.plot(CPUTimes,ElapsedTimes)
    parameters = {'PREMPTION' : [str(PREMPTION)],
                 'TOUT_LEARNER': [TIMEOUTVALUE_LEARNER],'TOUT_PROPOSER':[TIMEOUTVALUE_PROPOSER],
                 'MSG_DELAY':[MSG_DELAY],'MSG_LOSS_RATE':[MSG_LOSS_RATE],
                 'TIMEOUT': [str(TIMEOUT)]}
    plotter.drawTable({'IterationNumber':iterations,'CPUTimes':CPUTimes,'ElapsedTimes':ElapsedTimes},parameters)
        

# This is an executable specification of the algorithm described in
# Lamport, L. (2001).  Paxos Made Simple.  ACM SIGACT News 
# (Distributed Computing Column), 32(4):51-58, December.

# This code includes setup and termination for running repeated rounds until
# the learners all terminate after learning the consent value.
